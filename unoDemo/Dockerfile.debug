# ARGUMENTS --------------------------------------------------------------------
##
# Board architecture
##
ARG IMAGE_ARCH=



##
# Base container version
##
ARG BASE_VERSION=3.0.0-8.0

##
# Directory of the application inside container
##
ARG APP_ROOT=

##
# Debug port
##
ARG SSH_DEBUG_PORT=

##
# Run as
##
ARG SSHUSERNAME=

##
# Board GPU vendor prefix
##
ARG GPU=

FROM --platform=arm64 \
    commontorizon/wayland-base-gtk:4-rc AS common-gtk

# BUILD ------------------------------------------------------------------------
##
# Deploy Step .NET Uno
##
FROM --platform=linux/${IMAGE_ARCH} \
    torizon/dotnet-uno-debug:${BASE_VERSION} AS Debug

ARG IMAGE_ARCH
ARG GPU
ARG SSH_DEBUG_PORT
ARG APP_ROOT
ARG SSHUSERNAME

# SSH for remote debug
EXPOSE ${SSH_DEBUG_PORT}

# Make sure we don't get notifications we can't answer during building.
ENV DEBIAN_FRONTEND="noninteractive"

# for vivante GPU we need some "special" sauce
RUN apt-get -q -y update && \
        if [ "${GPU}" = "-vivante" ] || [ "${GPU}" = "-imx8" ]; then \
            apt-get -q -y install \
            imx-gpu-viv-wayland-dev \
        ; else \
            apt-get -q -y install \
            libgl1 libgles2 libgl1-mesa-dev \
        ; fi \
    && \
    apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# your regular RUN statements here
# Install required packages
RUN apt-get -q -y update && \
    apt-get -q -y install \
    openssl \
    openssh-server \
    rsync \
    file && \
    apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# automate for torizonPackages.json
RUN apt-get -q -y update && \
    apt-get -q -y install \
# DO NOT REMOVE THIS LABEL: this is used for VS Code automation
    # __torizon_packages_dev_start__
	libgpiod-dev:arm64 \
    # __torizon_packages_dev_end__
# DO NOT REMOVE THIS LABEL: this is used for VS Code automation
    && \
    apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# ⚠️ DEBUG PURPOSES ONLY!!
# copies RSA key to enable SSH login for user
COPY .conf/id_rsa.pub /id_rsa.pub

# create folders needed for the different components
# configures SSH access to the container and sets environment by default
RUN mkdir /var/run/sshd && \
    sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' \
        -i /etc/pam.d/sshd && \
    if test $SSHUSERNAME != root ; \
        then mkdir -p /home/$SSHUSERNAME/.ssh ; \
        else mkdir -p /root/.ssh ; fi && \
    if test $SSHUSERNAME != root ; \
        then cp /id_rsa.pub /home/$SSHUSERNAME/.ssh/authorized_keys ; \
        else cp /id_rsa.pub /root/.ssh/authorized_keys ; fi && \
    echo "PermitUserEnvironment yes" >> /etc/ssh/sshd_config && \
    echo "Port ${SSH_DEBUG_PORT}" >> /etc/ssh/sshd_config && \
    su -c "env" $SSHUSERNAME > /etc/environment

RUN rm -r /etc/ssh/ssh*key && \
    dpkg-reconfigure openssh-server

# GTK iim
COPY --from=common-gtk /usr/lib/aarch64-linux-gnu/gtk-3.0/3.0.0/immodules/im-wltextinputv1.so /usr/lib/aarch64-linux-gnu/gtk-3.0/3.0.0/immodules/im-wltextinputv1.so

RUN /usr/lib/aarch64-linux-gnu/libgtk-3-0/gtk-query-immodules-3.0 --update-cache

# Copy the compiled application to the $APP_ROOT directory path inside the
# container, where $APP_ROOT is the torizon_app_root configuration defined
# in settings.json.
COPY --chown=$SSHUSERNAME:$SSHUSERNAME ./unoDemo.Skia.Gtk/bin/Debug/net8.0/linux-${IMAGE_ARCH}/publish ${APP_ROOT}

CMD [ "/usr/sbin/sshd", "-D" ]
